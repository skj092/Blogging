[
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn’t specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "I am a mathematics graduate passionate about data science in general and deep learning in particular. I love to learn new things and grow. I’ve spent the last 3 years growing as a developer through experience and education.\nI prefer to think of myself as an open-minded, down-to-earth, and outgoing person. I care very much for people whom I come across in my life and try to make their lives easier I love nature as well, this is why I like to go on camping, hiking, and all sorts of adventure activities.\nI also like to read about anthropology, psychology, and history to know how we all grow and why we are what we are. I am not sure if it’s true but I like to think that whatever we do has a reason most of the time we are not aware of our activities and thoughts but it always has a reason.\nI am currently working as a Web Developer at Accenture Solution and solving machine learning problems in my free time."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "myblog",
    "section": "",
    "text": "Blur the face in an image or video\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nEvolution of Artificial Neural Network(ANN)\n\n\n\n\n\n\n\n\n\n\n \n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\n\n\nDec 21, 2022\n\n\nHarlow Malloc\n\n\n\n\n\n\n  \n\n\n\n\nWelcome To My Blog\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nDec 18, 2022\n\n\nTristan O’Malley\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/ANN/2020-07-05-Evolution-of-Artificial-Neural-Network(ANN).html",
    "href": "posts/ANN/2020-07-05-Evolution-of-Artificial-Neural-Network(ANN).html",
    "title": "Evolution of Artificial Neural Network(ANN)",
    "section": "",
    "text": "Artificial intelligence (AI) is a branch of computer science capable of performing tasks that typically require human intelligence."
  },
  {
    "objectID": "posts/ANN/2020-07-05-Evolution-of-Artificial-Neural-Network(ANN).html#what-is-deep-learning",
    "href": "posts/ANN/2020-07-05-Evolution-of-Artificial-Neural-Network(ANN).html#what-is-deep-learning",
    "title": "Evolution of Artificial Neural Network(ANN)",
    "section": "What is Deep Learning?",
    "text": "What is Deep Learning?\n\ndeep learning is a more approachable name for an artificial neural network. The “deep” in deep learning refers to the depth of the network. An artificial neural network can be very shallow.\n\n\nMachine learning is the science of getting computers to act without being explicitly programmed."
  },
  {
    "objectID": "posts/ANN/2020-07-05-Evolution-of-Artificial-Neural-Network(ANN).html#ann-artificial-neural-networks",
    "href": "posts/ANN/2020-07-05-Evolution-of-Artificial-Neural-Network(ANN).html#ann-artificial-neural-networks",
    "title": "Evolution of Artificial Neural Network(ANN)",
    "section": "ANN: Artificial Neural Networks",
    "text": "ANN: Artificial Neural Networks\n\nANNs are inspired by biological neurons found in cerebral cortex of our brain.\n\n\n\nA neuron or nerve cell is an electrically excitable cell that communicates with other cells via specialized connections called synapses.\nANNs are core of deep learning. Hence one of the most important topic to understand."
  },
  {
    "objectID": "posts/ANN/2020-07-05-Evolution-of-Artificial-Neural-Network(ANN).html#perceptron",
    "href": "posts/ANN/2020-07-05-Evolution-of-Artificial-Neural-Network(ANN).html#perceptron",
    "title": "Evolution of Artificial Neural Network(ANN)",
    "section": "Perceptron",
    "text": "Perceptron\nA Perceptron is one of the simplese ANN architectures, invented in 1957 by Frank Rosenblatt.\n\nA perceptron works similar to a biological neuron. A biological neuron receives electrical signals from its dendriles, modulates the electrical signals in various amounts, and then fires an output signal through its synapses only when the total strength of the input signals exceeds a certain threshold. The output is then fed to another neuron, and so forth.\n\n\nTo model the biological phenomenon, the artificial neuron performs two consecutive functions: it calculates the weighted sum of the inputs to represent the totgal strength of the input signals, and it applies a step function to the result to determine whether to fire the ourput 1 if the signal exceeds a certain threshold of 0 if the signal doesn’t exceed the threshold.\n\n\nHow Peceptron Works?\nThe perceptron’s learning logic goes like this:\n\nThe neuron calculate the weighted sum and applies the activation function to make a prediction y^. This is called the feedforward process:\n\n\\[y\\hat{} =  activation\\left(\\sum\\nolimits x_i \\cdot w_i + b\\right)\\]\n\nIt compares the output prediction with the correct label to calculate the error:\n\n\\[error = y-y\\hat{}\\]\n\nIt then update the weight. If the prediction is too high, it adjust the weight to make a lower prediction the next time, and vice versa.\nRepeat!\n\nHere’s how a since perceptron works to classify two classes :\n\nDrawback of perceptron. Sometimes its not possible to get desired result with only perceptron. In the below example you can see the model in not able to draw a line to classify the data(linearly inseperable data)\n\nIndroduction of ANN If you increase the number of neuron then you cann see model works pretty well. The stack of more than one neuron is called Multi Layer Perceptron or ANN.\n\nANN using Keras\n\n\nCode\n# TensorFlow and tf.keras\nimport tensorflow as tf\n\n# Helper libraries\nimport numpy as np\nfrom tensorflow.keras import initializers\nfrom tensorflow.python.keras import activations\n\nprint(tf.__version__)\n\n# downloading fashion_mnist data\nfashion_mnist = tf.keras.datasets.fashion_mnist\n\n(train_images, train_labels), (test_images, test_labels) = fashion_mnist.load_data()\n\nclass_names = ['T-shirt/top', 'Trouser', 'Pullover', 'Dress', 'Coat',\n               'Sandal', 'Shirt', 'Sneaker', 'Bag', 'Ankle boot']\n\ntrain_images = train_images / 255.0\n\ntest_images = test_images / 255.0 \n\nactivation = tf.keras.activations.relu\n\nmodel = tf.keras.Sequential([\ntf.keras.layers.Flatten(input_shape=(28, 28)),\ntf.keras.layers.Dense(128, activation=activation),\ntf.keras.layers.Dense(10)\n])\n\nmodel.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])\n\n# model summary\nmodel.summary()\n\n\nc:\\users\\sonu.ramkumar.jha\\desktop\\experiments\\env\\lib\\site-packages\\numpy\\_distributor_init.py:30: UserWarning: loaded more than 1 DLL from .libs:\nc:\\users\\sonu.ramkumar.jha\\desktop\\experiments\\env\\lib\\site-packages\\numpy\\.libs\\libopenblas.GK7GX5KEQ4F6UYO3P26ULGBQYHGQO7J4.gfortran-win_amd64.dll\nc:\\users\\sonu.ramkumar.jha\\desktop\\experiments\\env\\lib\\site-packages\\numpy\\.libs\\libopenblas.WCDJNK7YVMPZQ2ME2ZZHJJRJ3JIKNDB7.gfortran-win_amd64.dll\n  warnings.warn(\"loaded more than 1 DLL from .libs:\"\n\n\n2.5.0\nModel: \"sequential\"\n_________________________________________________________________\nLayer (type)                 Output Shape              Param #   \n=================================================================\nflatten (Flatten)            (None, 784)               0         \n_________________________________________________________________\ndense (Dense)                (None, 128)               100480    \n_________________________________________________________________\ndense_1 (Dense)              (None, 10)                1290      \n=================================================================\nTotal params: 101,770\nTrainable params: 101,770\nNon-trainable params: 0\n_________________________________________________________________\n\n\n\n\nCode\nmodel.fit(train_images, train_labels, epochs=10)\n\ntest_loss, test_acc = model.evaluate(test_images,  test_labels, verbose=2)\n\nprint('test_loss', test_loss)\nprint('test_accuracy', test_acc)\n\n\nEpoch 1/10\n1875/1875 [==============================] - 4s 2ms/step - loss: 0.5000 - accuracy: 0.8255\nEpoch 2/10\n1875/1875 [==============================] - 3s 1ms/step - loss: 0.3751 - accuracy: 0.8645\nEpoch 3/10\n1875/1875 [==============================] - 3s 2ms/step - loss: 0.3388 - accuracy: 0.8773\nEpoch 4/10\n1875/1875 [==============================] - 3s 2ms/step - loss: 0.3142 - accuracy: 0.8843\nEpoch 5/10\n1875/1875 [==============================] - 3s 2ms/step - loss: 0.2957 - accuracy: 0.8922\nEpoch 6/10\n1875/1875 [==============================] - 3s 2ms/step - loss: 0.2797 - accuracy: 0.8971\nEpoch 7/10\n1875/1875 [==============================] - 3s 2ms/step - loss: 0.2685 - accuracy: 0.8991\nEpoch 8/10\n1875/1875 [==============================] - 3s 1ms/step - loss: 0.2577 - accuracy: 0.9028\nEpoch 9/10\n1875/1875 [==============================] - 3s 1ms/step - loss: 0.2476 - accuracy: 0.9076\nEpoch 10/10\n1875/1875 [==============================] - 3s 1ms/step - loss: 0.2388 - accuracy: 0.9105\n313/313 - 0s - loss: 0.3403 - accuracy: 0.8798\ntest_loss 0.34025073051452637\ntest_accuracy 0.879800021648407"
  },
  {
    "objectID": "posts/detect-face-and-blur/2022-05-24-Detect-Face-And-Blur.html",
    "href": "posts/detect-face-and-blur/2022-05-24-Detect-Face-And-Blur.html",
    "title": "myblog",
    "section": "",
    "text": "Blur the face in an image or video\n\nAn introduction to the world of Deep Learning.\n\n\ntoc: true\nbadges: true\ncomments: true\n\n\nBlurring the face area of people from videos is done in all news channels and to hide the identity of a person. With computer vision, We can automatically detect the face region of the person and use it to blur the image. In this project we will build a computer vision model which can detect face in an image and blur it.\n\n1. Read an image\n2. Convert it to grayscale\n3. load Cascade Classifier\n4. Detect Faces\n5. Draw Bounding Box\n6. Blur the face\n\n# Import necessary library\nimport cv2\nimport matplotlib.pyplot as plt\n\nStep-1: Read an image\n\nimg = cv2.imread('../images/face.jpg')\nplt.imshow(img[:,:,::-1]) # opencv read an image into BGR mode, to convert it into RGB we reverse the image array\n\n<matplotlib.image.AxesImage at 0x1e1cedff610>\n\n\n\n\n\nStep-2: Convert the image to grayscale\n\ngray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\nplt.imshow(gray, cmap='gray')\n\n<matplotlib.image.AxesImage at 0x29d1fcbd9f0>\n\n\n\n\n\nStep-3: Loading OpenCV CascadeClassifier\n\nface_classifier = cv2.CascadeClassifier('haarcascades/haarcascade_frontalface_default.xml')\n\nStep-4: Detecting faces in the grayscaled image\n\nfaces = face_classifier.detectMultiScale(gray)\n\nStep-5: Draw Blounding Box around the detected faces\n\nfor (x,y,w,h) in faces:\n    cv2.rectangle(img, (x,y), (x+w,y+h), (127,0,255),2)\n    plt.imshow(img[:,:,::-1])\n\n\n\n\nStep-6: Blur the face\n\n# select region of face in the original image\nROI = img[y:y+h, x:x+w]\n\n# blur the face region\nblur_face = cv2.GaussianBlur(ROI, (91,91),0)\n\n\n# replace original face with the blurred one\nimg[y:y+h, x:x+w] = blur_face\n\n\n# Final Image\nplt.imshow(img[:,:,::-1])\n\n<matplotlib.image.AxesImage at 0x29d25136620>"
  }
]